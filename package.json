{
  "_args": [
    [
      {
        "raw": "react-native-ble-manager@git+https://github.com/zhanguangao/react-native-ble-manager.git",
        "scope": null,
        "escapedName": "react-native-ble-manager",
        "name": "react-native-ble-manager",
        "rawSpec": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
        "spec": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:zhanguangao/react-native-ble-manager.git",
          "sshUrl": "git+ssh://git@github.com/zhanguangao/react-native-ble-manager.git",
          "httpsUrl": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
          "gitUrl": "git://github.com/zhanguangao/react-native-ble-manager.git",
          "shortcut": "github:zhanguangao/react-native-ble-manager",
          "directUrl": "https://raw.githubusercontent.com/zhanguangao/react-native-ble-manager/master/package.json"
        }
      },
      "E:\\VinkaReact\\VinkaReact\\Vinka"
    ]
  ],
  "_from": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
  "_id": "react-native-ble-manager@6.2.4",
  "_inCache": true,
  "_location": "/react-native-ble-manager",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-ble-manager@git+https://github.com/zhanguangao/react-native-ble-manager.git",
    "scope": null,
    "escapedName": "react-native-ble-manager",
    "name": "react-native-ble-manager",
    "rawSpec": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
    "spec": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:zhanguangao/react-native-ble-manager.git",
      "sshUrl": "git+ssh://git@github.com/zhanguangao/react-native-ble-manager.git",
      "httpsUrl": "git+https://github.com/zhanguangao/react-native-ble-manager.git",
      "gitUrl": "git://github.com/zhanguangao/react-native-ble-manager.git",
      "shortcut": "github:zhanguangao/react-native-ble-manager",
      "directUrl": "https://raw.githubusercontent.com/zhanguangao/react-native-ble-manager/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/zhanguangao/react-native-ble-manager.git#0154c8cf3c91fdc69e2ce9cfd949848320eb364d",
  "_shasum": "b38d767289615746027a21ec54bd87a745151761",
  "_shrinkwrap": null,
  "_spec": "react-native-ble-manager@git+https://github.com/zhanguangao/react-native-ble-manager.git",
  "_where": "E:\\VinkaReact\\VinkaReact\\Vinka",
  "author": {
    "name": "Innove",
    "url": "https://github.com/innoveit"
  },
  "bugs": {
    "url": "https://github.com/innoveit/react-native-ble-manager/issues"
  },
  "dependencies": {},
  "description": "A BLE module for react native.",
  "devDependencies": {},
  "gitHead": "0154c8cf3c91fdc69e2ce9cfd949848320eb364d",
  "homepage": "https://github.com/innoveit/react-native-ble-manager#readme",
  "keywords": [
    "react-native",
    "android",
    "ios",
    "ble",
    "bluetooth",
    "low energy"
  ],
  "license": "Apache-2.0",
  "main": "BleManager",
  "name": "react-native-ble-manager",
  "optionalDependencies": {},
  "readme": "# react-native-ble-manager\r\n[![npm version](https://img.shields.io/npm/v/react-native-ble-manager.svg?style=flat)](https://www.npmjs.com/package/react-native-ble-manager)\r\n[![npm downloads](https://img.shields.io/npm/dm/react-native-ble-manager.svg?style=flat)](https://www.npmjs.com/package/react-native-ble-manager)\r\n[![GitHub issues](https://img.shields.io/github/issues/innoveit/react-native-ble-manager.svg?style=flat)](https://github.com/innoveit/react-native-ble-manager/issues)\r\n\r\nThis is a porting of https://github.com/don/cordova-plugin-ble-central project to React Native.\r\n\r\n## Requirements\r\nRN 0.40+\r\n\r\nRN 0.30-0.39 supported until 2.4.3\r\n\r\n## Supported Platforms\r\n- iOS 8+\r\n- Android (API 19+)\r\n\r\n## Install\r\n```shell\r\nnpm i --save react-native-ble-manager\r\n```\r\nAfter installing, you need to link the native library. You can either:\r\n* Link native library with `react-native link`, or\r\n* Link native library manually\r\n\r\nBoth approaches are described below.\r\n\r\n### Link Native Library with `react-native link`\r\n\r\n```shell\r\nreact-native link react-native-ble-manager\r\n```\r\n\r\nAfter this step:\r\n * iOS should be linked properly.\r\n * Android will need one more step, you need to edit `android/app/build.gradle`:\r\n```gradle\r\n// file: android/app/build.gradle\r\n...\r\n\r\nandroid {\r\n    ...\r\n\r\n    defaultConfig {\r\n        ...\r\n        minSdkVersion 18 // <--- make sure this is 18 or greater\r\n        ...\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### Link Native Library Manually\r\n\r\n#### iOS\r\n- Open the node_modules/react-native-ble-manager/ios folder and drag BleManager.xcodeproj into your Libraries group.\r\n- Check the \"Build Phases\"of your project and add \"libBleManager.a\" in the \"Link Binary With Libraries\" section.\r\n\r\n#### Android\r\n##### Update Gradle Settings\r\n\r\n```gradle\r\n// file: android/settings.gradle\r\n...\r\n\r\ninclude ':react-native-ble-manager'\r\nproject(':react-native-ble-manager').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-ble-manager/android')\r\n```\r\n##### Update Gradle Build\r\n\r\n```gradle\r\n// file: android/app/build.gradle\r\n...\r\n\r\nandroid {\r\n    ...\r\n\r\n    defaultConfig {\r\n        ...\r\n        minSdkVersion 18 // <--- make sure this is 18 or greater\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\r\ndependencies {\r\n    ...\r\n    compile project(':react-native-ble-manager')\r\n}\r\n```\r\n##### Update Android Manifest\r\n\r\n```xml\r\n// file: android/app/src/main/AndroidManifest.xml\r\n...\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\"/>\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n...\r\n```\r\n\r\n##### Register React Package\r\n```java\r\n...\r\nimport it.innove.BleManagerPackage; // <--- import\r\n\r\npublic class MainApplication extends Application implements ReactApplication {\r\n\r\n    ...\r\n\r\n    @Override\r\n    protected List<ReactPackage> getPackages() {\r\n        return Arrays.<ReactPackage>asList(\r\n            new MainReactPackage(),\r\n            new BleManagerPackage() // <------ add the package\r\n        );\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n## Note\r\n- Remember to use the `start` method before anything.\r\n- If you have problem with old devices try avoid to connect/read/write to a peripheral during scan.\r\n- Android API >= 23 require the ACCESS_COARSE_LOCATION permission to scan for peripherals. React Native >= 0.33 natively support PermissionsAndroid like in the example.\r\n- Before write, read or start notification you need to call `retrieveServices` method\r\n\r\n## Example\r\nLook in the [example](https://github.com/innoveit/react-native-ble-manager/tree/master/example) project.\r\n\r\n## Methods\r\n\r\n### start(options)\r\nInit the module.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `options` - `JSON`\r\n\r\nThe parameter is optional the configuration keys are:\r\n- `showAlert` - `Boolean` - [iOS only] Show or hide the alert if the bluetooth is turned off during initialization\r\n- `restoreIdentifierKey` - `String` - [iOS only] Unique key to use for CoreBluetooth state restoration\r\n- `forceLegacy` - `Boolean` - [Android only] Force to use the LegacyScanManager\r\n\r\n__Examples__\r\n```js\r\nBleManager.start({showAlert: false})\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Module initialized');\r\n  });\r\n\r\n```\r\n\r\n### scan(serviceUUIDs, seconds, allowDuplicates, scanningOptions)\r\nScan for availables peripherals.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `serviceUUIDs` - `Array of String` - the UUIDs of the services to looking for. On Android the filter works only for 5.0 or newer.\r\n- `seconds` - `Integer` - the amount of seconds to scan.\r\n- `allowDuplicates` - `Boolean` - [iOS only] allow duplicates in device scanning\r\n- `scanningOptions` - `JSON` - [Android only] after Android 5.0, user can control specific ble scan behaviors:\r\n  - `numberOfMatches` - `Number` - corresponding to [`setNumOfMatches`](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setNumOfMatches(int))\r\n  - `matchMode` - `Number` - corresponding to [`setMatchMode`](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setMatchMode(int))\r\n  - `scanMode` - `Number` - corresponding to [`setScanMode`](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setScanMode(int))\r\n\r\n\r\n__Examples__\r\n```js\r\nBleManager.scan([], 5, true)\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Scan started');\r\n  });\r\n\r\n```\r\n\r\n### stopScan()\r\nStop the scanning.\r\nReturns a `Promise` object.\r\n\r\n__Examples__\r\n```js\r\nBleManager.stopScan()\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Scan stopped');\r\n  });\r\n\r\n```\r\n\r\n### connect(peripheralId)\r\nAttempts to connect to a peripheral. In many case if you can't connect you have to scan for the peripheral before.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral to connect.\r\n\r\n__Examples__\r\n```js\r\nBleManager.connect('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Connected');\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### disconnect(peripheralId)\r\nDisconnect from a peripheral.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral to disconnect.\r\n\r\n__Examples__\r\n```js\r\nBleManager.disconnect('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Disconnected');\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### enableBluetooth() [Android only]\r\nCreate the request to the user to activate the bluetooth.\r\nReturns a `Promise` object.\r\n\r\n__Examples__\r\n```js\r\nBleManager.enableBluetooth()\r\n  .then(() => {\r\n    // Success code\r\n    console.log('The bluetooh is already enabled or the user confirm');\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log('The user refuse to enable bluetooth');\r\n  });\r\n```\r\n\r\n### checkState()\r\nForce the module to check the state of BLE and trigger a BleManagerDidUpdateState event.\r\n\r\n__Examples__\r\n```js\r\nBleManager.checkState();\r\n```\r\n\r\n### startNotification(peripheralId, serviceUUID, characteristicUUID)\r\nStart the notification on the specified characteristic, you need to call `retrieveServices` method before.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n- `serviceUUID` - `String` - the UUID of the service.\r\n- `characteristicUUID` - `String` - the UUID of the characteristic.\r\n\r\n__Examples__\r\n```js\r\nBleManager.startNotification('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Notification started');\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### stopNotification(peripheralId, serviceUUID, characteristicUUID)\r\nStop the notification on the specified characteristic.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n- `serviceUUID` - `String` - the UUID of the service.\r\n- `characteristicUUID` - `String` - the UUID of the characteristic.\r\n\r\n### read(peripheralId, serviceUUID, characteristicUUID)\r\nRead the current value of the specified characteristic, you need to call `retrieveServices` method before.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n- `serviceUUID` - `String` - the UUID of the service.\r\n- `characteristicUUID` - `String` - the UUID of the characteristic.\r\n\r\n__Examples__\r\n```js\r\nBleManager.read('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\r\n  .then((readData) => {\r\n    // Success code\r\n    console.log('Read: ' + readData);\r\n    \r\n    const buffer = Buffer.Buffer.from(readData);    //https://github.com/feross/buffer#convert-arraybuffer-to-buffer\r\n    const sensorData = buffer.readUInt8(1, true);\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize)\r\nWrite with response to the specified characteristic, you need to call `retrieveServices` method before.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n- `serviceUUID` - `String` - the UUID of the service.\r\n- `characteristicUUID` - `String` - the UUID of the characteristic.\r\n- `data` - `Byte array` - the data to write.\r\n- `maxByteSize` - `Integer` - specify the max byte size before splitting message\r\n\r\n__Data preparation__\r\n\r\nIf your data is not in byte array format you should convert it first. For strings you can use `convert-string` or other npm package in order to achieve that.\r\nInstall the package first:\r\n```shell\r\nnpm install convert-string\r\n```\r\nThen use it in your application:\r\n```js\r\n// Import/require in the beginning of the file\r\nimport { stringToBytes } from 'convert-string';\r\n// Convert data to byte array before write/writeWithoutResponse\r\nconst data = stringToBytes(yourStringData);\r\n```\r\nFeel free to use other packages or google how to convert into byte array if your data has other format.\r\n\r\n__Examples__\r\n```js\r\nBleManager.write('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', data)\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Write: ' + data);\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, queueSleepTime)\r\nWrite without response to the specified characteristic, you need to call `retrieveServices` method before.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n- `serviceUUID` - `String` - the UUID of the service.\r\n- `characteristicUUID` - `String` - the UUID of the characteristic.\r\n- `data` - `Byte array` - the data to write.\r\n- `maxByteSize` - `Integer` - (Optional) specify the max byte size\r\n- `queueSleepTime` - `Integer` - (Optional) specify the wait time before each write if the data is greater than maxByteSize\r\n\r\n__Data preparation__\r\n\r\nIf your data is not in byte array format check info for the write function above.\r\n\r\n__Example__\r\n```js\r\nBleManager.writeWithoutResponse('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', data)\r\n  .then(() => {\r\n    // Success code\r\n    console.log('Writed: ' + data);\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### readRSSI(peripheralId)\r\nRead the current value of the RSSI.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n\r\n__Examples__\r\n```js\r\nBleManager.readRSSI('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\r\n  .then((rssi) => {\r\n    // Success code\r\n    console.log('Current RSSI: ' + rssi);\r\n  })\r\n  .catch((error) => {\r\n    // Failure code\r\n    console.log(error);\r\n  });\r\n```\r\n\r\n### retrieveServices(peripheralId)\r\nRetrieve the peripheral's services and characteristics.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n\r\n__Examples__\r\n```js\r\nBleManager.retrieveServices('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\r\n  .then((peripheralInfo) => {\r\n    // Success code\r\n    console.log('Peripheral info:', peripheralInfo);\r\n  });  \r\n```\r\n\r\n### getConnectedPeripherals(serviceUUIDs)\r\nReturn the connected peripherals.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `serviceUUIDs` - `Array of String` - the UUIDs of the services to looking for.\r\n\r\n__Examples__\r\n```js\r\nBleManager.getConnectedPeripherals([])\r\n  .then((peripheralsArray) => {\r\n    // Success code\r\n    console.log('Connected peripherals: ' + peripheralsArray.length);\r\n  });\r\n\r\n```\r\n\r\n### createBond(peripheralId) [Android only]\r\nStart the bonding (pairing) process with the remote device.\r\nReturns a `Promise` object. The promise is resolved when either `new bond successfully created` or `bond already existed`, otherwise it will be rejected.\r\n\r\n__Examples__\r\n```js\r\nBleManager.createBond(peripheralId)\r\n  .then(() => {\r\n    console.log('createBond success or there is already an existing one');\r\n  })\r\n  .catch(() => {\r\n    console.log('fail to bond');\r\n  })\r\n\r\n```\r\n\r\n### getBondedPeripherals() [Android only]\r\nReturn the bonded peripherals.\r\nReturns a `Promise` object.\r\n\r\n__Examples__\r\n```js\r\nBleManager.getBondedPeripherals([])\r\n  .then((bondedPeripheralsArray) => {\r\n    // Each peripheral in returned array will have id and name properties\r\n    console.log('Bonded peripherals: ' + bondedPeripheralsArray.length);\r\n  });\r\n\r\n```\r\n\r\n### getDiscoveredPeripherals()\r\nReturn the discovered peripherals after a scan.\r\nReturns a `Promise` object.\r\n\r\n__Examples__\r\n```js\r\nBleManager.getDiscoveredPeripherals([])\r\n  .then((peripheralsArray) => {\r\n    // Success code\r\n    console.log('Discovered peripherals: ' + peripheralsArray.length);\r\n  });\r\n\r\n```\r\n\r\n### removePeripheral(peripheralId) [Android only] \r\nRemoves a disconnected peripheral from the cached list.\r\nIt is useful if the device is turned off, because it will be re-discovered upon turning on again.\r\nReturns a `Promise` object.\r\n\r\n__Arguments__\r\n- `peripheralId` - `String` - the id/mac address of the peripheral.\r\n\r\n### isPeripheralConnected(peripheralId, serviceUUIDs)\r\nCheck whether a specific peripheral is connected and return `true` or `false`.\r\nReturns a `Promise` object.\r\n\r\n__Examples__\r\n```js\r\nBleManager.isPeripheralConnected('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', [])\r\n  .then((isConnected) => {\r\n    if (isConnected) {\r\n      console.log('Peripheral is connected!');\r\n    } else {\r\n      console.log('Peripheral is NOT connected!');\r\n    }\r\n  });\r\n\r\n```\r\n\r\n## Events\r\n### BleManagerStopScan\r\nThe scanning for peripherals is ended.\r\n\r\n__Arguments__\r\n- `none`\r\n\r\n__Examples__\r\n```js\r\nbleManagerEmitter.addListener(\r\n    'BleManagerStopScan',\r\n    () => {\r\n        // Scanning is stopped\r\n    }\r\n);\r\n```\r\n\r\n###  BleManagerDidUpdateState\r\nThe BLE change state.\r\n\r\n__Arguments__\r\n- `state` - `String` - the new BLE state ('on'/'off').\r\n\r\n__Examples__\r\n```js\r\nbleManagerEmitter.addListener(\r\n    'BleManagerDidUpdateState',\r\n    (args) => {\r\n        // The new state: args.state\r\n    }\r\n);\r\n```\r\n\r\n###  BleManagerDiscoverPeripheral\r\nThe scanning find a new peripheral.\r\n\r\n__Arguments__\r\n- `id` - `String` - the id of the peripheral\r\n- `name` - `String` - the name of the peripheral\r\n- `rssi` - ` Number` - the RSSI value\r\n- `advertising` - `JSON` - the advertising payload, according to platforms:\r\n    - [Android] contains the raw `bytes` and  `data` (Base64 encoded string)\r\n    - [iOS] contains a JSON object with different keys according to [Apple's doc](https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/advertisement_data_retrieval_keys?language=objc), here are some examples:\r\n      - `kCBAdvDataChannel` - `Number`\r\n      - `kCBAdvDataIsConnectable` - `Number`\r\n      - `kCBAdvDataLocalName` - `String`\r\n      - `kCBAdvDataManufacturerData` - `JSON` - contains the raw `bytes` and  `data` (Base64 encoded string)\r\n\r\n__Examples__\r\n```js\r\nbleManagerEmitter.addListener(\r\n    'BleManagerDiscoverPeripheral',\r\n    (args) => {\r\n        // The id: args.id\r\n        // The name: args.name\r\n    }\r\n);\r\n```\r\n\r\n###  BleManagerDidUpdateValueForCharacteristic\r\nA characteristic notify a new value.\r\n\r\n__Arguments__\r\n- `peripheral` - `String` - the id of the peripheral\r\n- `characteristic` - `String` - the UUID of the characteristic\r\n- `value` - `Array` - the read value\r\n\r\n###  BleManagerConnectPeripheral\r\nA peripheral was connected.\r\n\r\n__Arguments__\r\n- `peripheral` - `String` - the id of the peripheral\r\n\r\n###  BleManagerDisconnectPeripheral\r\nA peripheral was disconnected.\r\n\r\n__Arguments__\r\n- `peripheral` - `String` - the id of the peripheral\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/innoveit/react-native-ble-manager.git"
  },
  "version": "6.2.4"
}
